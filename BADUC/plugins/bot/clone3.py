import logging
import os
import asyncio
from pyrogram.enums import ParseMode
from pyrogram import Client, filters
from pyrogram.errors.exceptions.bad_request_400 import AccessTokenExpired, AccessTokenInvalid
from pyrogram.types import BotCommand
from BADUC.core.config import API_HASH, API_ID, OWNER_ID
from BADUC import CLONE_OWNERS
from BADUC.core.clients import bot
from BADUC import mongodb

CLONES = set()
cloneownerdb = mongodb.cloneownerdb
clonebotdb = mongodb.clonebotdb

async def save_clonebot_owner(bot_id, user_id):
    await cloneownerdb.insert_one({"bot_id": bot_id, "user_id": user_id})

@bot.on_message(filters.command(["clone", "host", "deploy"]))
async def clone_txt(client, message):
    if len(message.command) > 1:
        bot_token = message.text.split("/clone", 1)[1].strip()
        mi = await message.reply_text("·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ ·¥° ú…™ ü·¥á …™ ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥.")
        try:
            ai = Client(bot_token, API_ID, API_HASH, bot_token=bot_token, plugins=dict(root="shizuchat/plugin"))
            await ai.start()
            bot = await ai.get_me()
            bot_id = bot.id
            user_id = message.from_user.id
            CLONE_OWNERS[bot_id] = user_id
            await ai.set_bot_commands([
                BotCommand("start", "‚úß s·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ ‚úß"),
                BotCommand("help", "‚úß …¢·¥á·¥õ ·¥õ ú·¥á  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú ‚úß"),
                BotCommand("ping", "‚úß ·¥Ñ ú·¥á·¥Ñ·¥ã …™“ì ·¥õ ú·¥á  ô·¥è·¥õ …™s ·¥Ä ü…™·¥†·¥á ·¥è Ä ·¥Ö·¥ás·¥Ö ‚úß"),
                BotCommand("shipping", "‚úß ·¥Ñ·¥è·¥ú·¥ò ü·¥ás ·¥è“ì ·¥Ö·¥Ä è ‚úß"),
                BotCommand("rankings", "‚úß ·¥ús·¥á Ä ·¥çs…¢  ü·¥á·¥Ä·¥Ö·¥á Ä ô·¥è·¥Ä Ä·¥Ö ‚úß"),
            ])
        except (AccessTokenExpired, AccessTokenInvalid):
            await mi.edit_text("…™…¥·¥†·¥Ä ü…™·¥Ö  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥. ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥è…¥·¥á.")
            return
        except Exception as e:
            cloned_bot = await clonebotdb.find_one({"token": bot_token})
            if cloned_bot:
                await mi.edit_text("  è·¥è·¥ú Ä  ô·¥è·¥õ …™Íú± ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ñ ü·¥è…¥·¥á·¥Ö ‚ù§Ô∏è")
                return

        await mi.edit_text("·¥Ñ ü·¥è…¥…™…¥…¢ ·¥ò Ä·¥è·¥Ñ·¥áÍú±Íú± Íú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö. ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ Íú∞·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è Íú±·¥õ·¥Ä Ä·¥õ.")
        try:
            details = {
                "bot_id": bot.id,
                "is_bot": True,
                "user_id": user_id,
                "name": bot.first_name,
                "token": bot_token,
                "username": bot.username,
            }
            cloned_bots = clonebotdb.find()
            cloned_bots_list = await cloned_bots.to_list(length=None)
            total_clones = len(cloned_bots_list)
            
            await bot.send_message(
                int(OWNER_ID), f"…¥·¥á·¥°~·¥Ñ ü·¥è…¥·¥á\n\n ô·¥è·¥õ:- @{bot.username}**\n\n·¥Ö·¥á·¥õ·¥Ä…™ üs:-**\n{details}"
            )

            await clonebotdb.insert_one(details)
            
            CLONES.add(bot.id)

            await mi.edit_text(
                f" ô·¥è·¥õ @{bot.username}  ú·¥ÄÍú±  ô·¥á·¥á…¥ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ñ ü·¥è…¥·¥á·¥Ö ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ‚úÖ.\n Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ñ ü·¥è…¥·¥á  ô è :- /delclone\n·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä ü ü ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õ  ü…™Íú±·¥õ  ô è:- /cloned"
            )
        except BaseException as e:
            logging.exception("·¥á Ä Ä·¥è Ä ·¥° ú…™ ü·¥á ·¥Ñ ü·¥è…¥…™…¥…¢  ô·¥è·¥õ.")
            await mi.edit_text(
                f"‚ö†Ô∏è <b>Error:</b>\n\n<code>{e}</code>\n\nÍú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú…™Íú± ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥õ·¥è @PBX_CHAT Íú∞·¥è Ä ·¥ÄÍú±Íú±…™Íú±·¥õ·¥Ä…¥·¥Ñ·¥á"
            )
    else:
        await message.reply_text("·¥ò Ä·¥è·¥†…™·¥Ö·¥á  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥ ·¥ÄÍú∞·¥õ·¥á Ä /clone ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö Íú∞ Ä·¥è·¥ç @Botfather.")

@bot.on_message(filters.command("cloned"))
async def list_cloned_bots(client, message):
    try:
        cloned_bots = clonebotdb.find()
        cloned_bots_list = await cloned_bots.to_list(length=None)
        if not cloned_bots_list:
            await message.reply_text("…¥·¥è  ô·¥è·¥õÍú±  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ ·¥Ñ ü·¥è…¥·¥á·¥Ö  è·¥á·¥õ.")
            return
        total_clones = len(cloned_bots_list)
        text = f"**Total Cloned Bots:** {total_clones}\n\n"
        for bot in cloned_bots_list:
            text += f"**Bot ID:** `{bot['bot_id']}`\n"
            text += f"**Bot Name:** {bot['name']}\n"
            text += f"**Bot Username:** @{bot['username']}\n\n"
        await message.reply_text(text)
    except Exception as e:
        logging.exception(e)
        await message.reply_text("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á  ü…™Íú±·¥õ…™…¥…¢ ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õÍú±.")

@bot.on_message(
    filters.command(["deletecloned", "delcloned", "delclone", "deleteclone", "removeclone", "cancelclone"])
)
async def delete_cloned_bot(client, message):
    try:
        if len(message.command) < 2:
            await message.reply_text("‚ö†Ô∏è ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥ ·¥ÄÍú∞·¥õ·¥á Ä ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
            return

        bot_token = " ".join(message.command[1:])
        ok = await message.reply_text("·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥...")

        cloned_bot = await clonebotdb.find_one({"token": bot_token})
        if cloned_bot:
            await clonebotdb.delete_one({"token": bot_token})
            CLONES.remove(cloned_bot["bot_id"])
            await ok.edit_text(
                "ü§ñ  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õ  ú·¥ÄÍú±  ô·¥á·¥á…¥  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö Íú∞ Ä·¥è·¥ç ·¥ç è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥ÄÍú±·¥á ‚úÖ\nüîÑ ·¥ã…™…¥·¥Ö ü è  Ä·¥á·¥†·¥è·¥ã·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥ Íú∞ Ä·¥è·¥ç @botfather ·¥è·¥õ ú·¥á Ä·¥°…™Íú±·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥°…™ ü ü Íú±·¥õ·¥è·¥ò ·¥° ú·¥á…¥ @{bot.username} ·¥°…™ ü ü  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ ‚ò†Ô∏è"
            )
            os.system(f"kill -9 {os.getpid()} && bash start")
        else:
            await message.reply_text("‚ö†Ô∏è ·¥õ ú·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥ …™Íú± …¥·¥è·¥õ …™…¥ ·¥õ ú·¥á ·¥Ñ ü·¥è…¥·¥á·¥Ö  ü…™Íú±·¥õ.")
    except Exception as e:
        await message.reply_text(f"·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ ·¥õ ú·¥á ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õ: {e}")
        logging.exception(e)


async def restart_bots():
    global CLONES
    try:
        logging.info(" Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥Ä ü ü ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õÍú±...")
        bots = [bot async for bot in clonebotdb.find()]
        
        async def restart_bot(bot):
            bot_token = bot["token"]
            ai = Client(bot_token, API_ID, API_HASH, bot_token=bot_token, plugins=dict(root="shizuchat/plugin"))
            try:
                await ai.start()
                bot_info = await ai.get_me()
                await ai.set_bot_commands([
                    BotCommand("start", "‚úß s·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ ‚úß"),
                BotCommand("help", "‚úß …¢·¥á·¥õ ·¥õ ú·¥á  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú ‚úß"),
                BotCommand("ping", "‚úß ·¥Ñ ú·¥á·¥Ñ·¥ã …™“ì ·¥õ ú·¥á  ô·¥è·¥õ …™s ·¥Ä ü…™·¥†·¥á ·¥è Ä ·¥Ö·¥ás·¥Ö ‚úß"),
                BotCommand("shipping", "‚úß ·¥Ñ·¥è·¥ú·¥ò ü·¥ás ·¥è“ì ·¥Ö·¥Ä è ‚úß"),
                BotCommand("rankings", "‚úß ·¥ús·¥á Ä ·¥çs…¢  ü·¥á·¥Ä·¥Ö·¥á Ä ô·¥è·¥Ä Ä·¥Ö ‚úß"),
            ])

                if bot_info.id not in CLONES:
                    CLONES.add(bot_info.id)
                    
            except (AccessTokenExpired, AccessTokenInvalid):
                await clonebotdb.delete_one({"token": bot_token})
                logging.info(f" Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ·¥áx·¥ò…™ Ä·¥á·¥Ö ·¥è Ä …™…¥·¥†·¥Ä ü…™·¥Ö ·¥õ·¥è·¥ã·¥á…¥ Íú∞·¥è Ä  ô·¥è·¥õ …™·¥Ö: {bot['bot_id']}")
            except Exception as e:
                logging.exception(f"·¥á Ä Ä·¥è Ä ·¥° ú…™ ü·¥á  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ…™…¥…¢  ô·¥è·¥õ ·¥°…™·¥õ ú ·¥õ·¥è·¥ã·¥á…¥ {bot_token}: {e}")
            
        await asyncio.gather(*(restart_bot(bot) for bot in bots))
        
    except Exception as e:
        logging.exception("·¥á Ä Ä·¥è Ä ·¥° ú…™ ü·¥á  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ…™…¥…¢  ô·¥è·¥õÍú±.")


@bot.on_message(filters.command("delallclone") & filters.user(int(OWNER_ID)))
async def delete_all_cloned_bots(client, message):
    try:
        a = await message.reply_text("·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ ·¥Ä ü ü ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õÍú±...")
        await clonebotdb.delete_many({})
        CLONES.clear()
        await a.edit_text("·¥Ä ü ü ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õÍú±  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ‚úÖ")
        os.system(f"kill -9 {os.getpid()} && bash start")
    except Exception as e:
        await a.edit_text(f"·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ ·¥Ä ü ü ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õÍú±. {e}")
        logging.exception(e)

  
